name: release
run-name: Release ${{ inputs.working-directory }} by @${{ github.actor }}
on:
  # TODO: remove this trigger when done testing
  pull_request:
    branches:
      - main
  # TODO: confirm this is useless, remove
  # workflow_call:
  #   inputs:
  #     working-directory:
  #       required: true
  #       type: string
  #       description: "From which folder this pipeline executes"
  workflow_dispatch:
    inputs:
      dangerous-nonmaster-release:
        required: false
        type: boolean
        default: false
        description: "Release from a non-master branch (danger!)"

env:
  PYTHON_VERSION: "3.12"
  UV_FROZEN: "true"
  UV_NO_SYNC: "true"

jobs:
  build:
    # TODO: restore handling of this flag
    # if: github.ref == 'refs/heads/main' || inputs.dangerous-nonmaster-release
    runs-on: ubuntu-latest

    outputs:
      pkg-name: ${{ steps.check-version.outputs.pkg-name }}
      version: ${{ steps.check-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python + uv
        uses: "./.github/actions/uv_setup"
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies including dev
        run: uv sync --dev
        shell: bash

      # Separation of build and release, to minimize permissions to the former.
      # See: https://github.com/pypa/gh-action-pypi-publish#non-goals
      - name: Build project for distribution
        run: uv build

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Check Version
        id: check-version
        shell: python
        working-directory: ${{ inputs.working-directory }}
        run: |
          import os
          import tomllib
          with open("pyproject.toml", "rb") as f:
              data = tomllib.load(f)
          pkg_name = data["project"]["name"]
          version = data["project"]["version"]
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"pkg-name={pkg_name}\n")
              f.write(f"version={version}\n")

  test-pypi-publish:
    needs:
      - build
    uses:
      ./.github/workflows/_test_release.yml
    permissions: write-all
    with:
      dangerous-nonmaster-release: true
      # TODO: restore the below once the pull_request trigger is replaced
      # dangerous-nonmaster-release: ${{ inputs.dangerous-nonmaster-release }}
    secrets: inherit

  pre-release-checks:
    needs:
      - build
      - test-pypi-publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python + uv
        uses: "./.github/actions/uv_setup"
        id: setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Import dist package
        shell: bash
        env:
          PKG_NAME: ${{ needs.build.outputs.pkg-name }}
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          uv venv
          VIRTUAL_ENV=.venv uv pip install dist/*.whl

          # Make the package (file)name into the imported package name
          IMPORT_NAME="$(echo "$PKG_NAME" | sed s/-/_/g)"

          uv run python -c "import $IMPORT_NAME; print(dir($IMPORT_NAME))"

      - name: Install dependencies including dev
        run: uv sync --dev
        shell: bash

      # Overwrite the local version of the package with the built version
      - name: Import published package (again)
        shell: bash
        env:
          PKG_NAME: ${{ needs.build.outputs.pkg-name }}
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          VIRTUAL_ENV=.venv uv pip install dist/*.whl

      - name: Run unit tests
        env:
          ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}
          ASTRA_DB_API_ENDPOINT: ${{ secrets.ASTRA_DB_API_ENDPOINT }}
        run: make test

      - name: Run integration tests
        env:
          ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}
          ASTRA_DB_API_ENDPOINT: ${{ secrets.ASTRA_DB_API_ENDPOINT }}
          HEADER_EMBEDDING_API_KEY_OPENAI: ${{ secrets.HEADER_EMBEDDING_API_KEY_OPENAI }}
        run: make test-integration
        working-directory: ${{ inputs.working-directory }}

      # TODO: another unit test on the least python supported version

  # publish:
  #   needs:
  #     - build
  #     - test-pypi-publish
  #     - pre-release-checks
  #   runs-on: ubuntu-latest
  #   permissions:
  #     # This permission is used for trusted publishing:
  #     # https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/
  #     #
  #     # Trusted publishing has to also be configured on PyPI for each package:
  #     # https://docs.pypi.org/trusted-publishers/adding-a-publisher/
  #     id-token: write

  #   defaults:
  #     run:
  #       working-directory: ${{ inputs.working-directory }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python + uv
  #       uses: "./.github/actions/uv_setup"
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - uses: actions/download-artifact@v5
  #       with:
  #         name: dist
  #         path: ${{ inputs.working-directory }}/dist/

  #     - name: Publish package distributions to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         packages-dir: ${{ inputs.working-directory }}/dist/
  #         verbose: true
  #         print-hash: true
  #         # Temp workaround since attestations are on by default as of gh-action-pypi-publish v1\.11\.0
  #         attestations: false

  # mark-release:
  #   needs:
  #     - build
  #     - test-pypi-publish
  #     - pre-release-checks
  #     - publish
  #   runs-on: ubuntu-latest
  #   permissions:
  #     # This permission is needed by `ncipollo/release-action` to
  #     # create the GitHub release.
  #     contents: write

  #   defaults:
  #     run:
  #       working-directory: ${{ inputs.working-directory }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python + uv
  #       uses: "./.github/actions/uv_setup"
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - uses: actions/download-artifact@v5
  #       with:
  #         name: dist
  #         path: ${{ inputs.working-directory }}/dist/

  #     - name: Create Release
  #       uses: ncipollo/release-action@v1
  #       with:
  #         artifacts: "dist/*"
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         draft: false
  #         generateReleaseNotes: true
  #         tag: ${{ inputs.working-directory }}/v${{ needs.build.outputs.version }}
  #         commit: ${{ github.sha }}
