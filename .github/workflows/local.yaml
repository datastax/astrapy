name: Run base integration tests on a local Data API

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write          # required for OIDC
  contents: read           # required for actions/checkout if you use it

env:
  AWS_ECR_REGION: ${{ secrets.AWS_ECR_REGION }}
  AWS_ECR_ACCOUNT_ID: ${{ secrets.AWS_ECR_ACCOUNT_ID }}
  AWS_ECR_ROLE_NAME: ${{ secrets.AWS_ECR_ROLE_NAME }}
  AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  AWS_ECR_HCD_IMAGE_TAG: "1.2.1-early-preview"

jobs:
  test:
    env:
      HEADER_EMBEDDING_API_KEY_OPENAI: ${{ secrets.HEADER_EMBEDDING_API_KEY_OPENAI }}
      # hardcoding the target DB
      DOCKER_COMPOSE_LOCAL_DATA_API: "yes"
      # turn on header-based reranker auth
      ASTRAPY_FINDANDRERANK_USE_RERANKER_HEADER: "yes"
      HEADER_RERANKING_API_KEY_NVIDIA: ${{ secrets.HEADER_RERANKING_API_KEY_NVIDIA }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pipx install uv
        make venv

    - name: Configure AWS credentials from OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ env.AWS_ECR_ACCOUNT_ID }}:role/${{ env.AWS_ECR_ROLE_NAME }}
        aws-region: ${{ env.AWS_ECR_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull the image
      run: |
        docker pull $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_ECR_HCD_IMAGE_TAG

    - name: Run pytest
      run: |
        uv run pytest tests/base/integration
